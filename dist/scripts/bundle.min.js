!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=5)}([function(e,n){},function(e,n){!function(e){"use strict";function n(){}n.prototype.render=function(e){return`<div class="card border-light mb-3">\n    <div class="card-header">${e.name}</div>\n    <div class="card-body">\n    <p class="img"><img id="dev-image" class="img-rounded" src="${e.avatar}" alt="${e.name}" style="height: 200px"></p>\n        <p class="card-text">${e.bio}</p>\n        <p class="card-text"><span class="glyphicon glyphicon-link" aria-hidden="true"></span> <a href="${e.web}">${e.web}</a></p>\n        <p class="card-text"><span class="glyphicon glyphicon-user" aria-hidden="true"></span> <a href="${e.twitter}">${e.twitter}</a></p>\n        <p class="card-text"><span class="glyphicon glyphicon-cloud" aria-hidden="true"></span> <a href="${e.github}">${e.github}</a></p>\n      <div>\n    </div>`},e.bazingaApp=e.bazingaApp||{},e.bazingaApp.DeveloperTemplate=n}(window)},function(e,n){!function(e){"use strict";function n(){this.defaultTemplate='<h5 class="mb-1">{{dev.name}}</h5><p>{{dev.title}}</p>'}n.prototype.render=function(e){let n=this.defaultTemplate,t="";return t+=n=(n=(n=n.replace("{{dev.id}}",e._id)).replace("{{dev.name}}",e.name)).replace("{{dev.title}}",e.title)},e.bazingaApp=e.bazingaApp||{},e.bazingaApp.Template=n}(window)},function(e,n){!function(e,n){"use strict";var t=t||{};const r=[];function o(e){const r=n.qs("#devs-list");e.forEach(function(e){const o=new t.Template,i=n.createElement("span",{class:"list-group-item list-group-item-action","data-id":e.id});r.appendChild(i),i.innerHTML=o.render(e),s=i,n.$on(s,"click",e=>{const t=s.getAttribute("data-id"),r=n.qsa("#devs-list > span");n.removeClass(r,"active"),n.addClass(s,"active"),a(t)});var s}),a(e[0].id)}function a(e){const t=n.qs("#developer");for(const n in r)if(r.hasOwnProperty(n)&&r[n].id==e){const e=new Developer(r[n]);t.innerHTML=e.render()}}t.sayThanks=function(){n.thanks()},t.init=function(){var e;e=o,n.ajax("data.json",function(n){for(const e of n){const n=new Developer(e);r.push(n)}e(r)})},n.$on(e,"load",t.init()),void 0===e.BazingaApp&&(window.bazingaApp=t)}(window,jqLite)},function(e,n){!function(e){"use strict";const n=e,t={};t.thanks=function(){console.log("Bazinga! Thanks for using jqLite version 0.1.0")},t.ajax=function(e,n){fetch?fetch(e).then(e=>e.json()).catch(e=>{throw new Error(`Sorry, there was an error processing your request: ${e}`)}).then(e=>n(e)):function(e,n){const t=new XMLHttpRequest;if(t.onreadystatechange=function(){try{4==t.readyState&&200==t.status&&n(JSON.parse(t.responseText))}catch(e){throw new Error("Sorry, there was an error processing your request: "+e)}},t.open("GET",e),t.send(),!t)throw new Error("Sorry there was an error creating an XMLHttpRequest instance")}(e,n)},t.qs=function(e,n){return(n||document).querySelector(e)},t.qsa=function(e,n){const t=n||document;return Array.prototype.slice.call(t.querySelectorAll(e))},t.createElement=function(e,n){const t=document.createElement(e);if(n)for(const[e,r]of Object.entries(n))t.setAttribute(e,r);return t},t.$on=function(e,n,t,r){const o=r||!1;e.addEventListener(n,t,o)},t.removeClass=function(e,n){for(const t of e)t.classList.remove(n)},t.addClass=function(e,n){e.className+=" "+n},n.jqLite||(n.jqLite=t)}(window)},function(e,n,t){t(4),t(3),t(2),t(1),t(0)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,